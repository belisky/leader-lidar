pipeline{
    agent any;
    environment {
        GITLAB='http://jenkins_gitlab:glpat-Vq1g_yhXpyHv5tcixr45@cb3307b24f9e/gitlab-instance-5a28c421/analytics.git'
 }
    tools {
        maven 'maven3.6.2'
        jdk 'jdk_8'
    }
    options {
        timestamps()
        timeout(time:15, unit:'MINUTES')
        gitLabConnection('jenkins_gitlab_pass')
    }
    stages {
 
        stage(' STAGE 0 checkout'){
            steps {
                checkout scm;
         
            }
        }
        stage('STAGE 1 build & test'){
            when {
                anyOf {
                    
                    branch "main"
                    branch "feature/*"
                    branch "release/*"
                }
            }

            steps {
                 
                sh "mvn package"
            }
        }
        stage('STAGE 2 e2e'){
            when {           
                    
                    anyOf {                    
                    branch "main"
                    branch "release/*"
                }
            }

            steps {                
                 
                sh """
               
                echo 'Sanity test A\n' > tests.txt
                echo 'Sanity test B\n' >> tests.txt
                echo 'Sanity test C\n' >> tests.txt
                curl -sSf -u "admin:=[;.,lp-0oKM" \
                     -O 'http://18.204.195.105:8082/artifactory/lidar/com/lidar/simulator/1.0.0/simulator-1.0.0.jar'
                curl -sSf -u "admin:=[;.,lp-0oKM" \
                     -O 'http://18.204.195.105:8082/artifactory/lidar/com/lidar/telemetry/1.0.0/telemetry-1.0.0.jar'        
                      
              
                 
                java -cp telemetry-1.0.0.jar:./target/analytics-99-SNAPSHOT.jar:simulator-1.0.0.jar:. com.lidar.simulation.Simulator
                
                 """
            }
        } 

        stage ('STAGE 3 publish') {
            when {          
                branch "main"         
                }
            steps {
                    withMaven(maven: 'maven3.6.2', jdk: 'jdk_8', mavenSettingsConfig: 'telemetry-settings-1'){

                    sh """                
                    mvn deploy -DskipTests
                    """
                }
            }
    } 
 
    stage ('STAGE 4 semantic version Release') {
      when { branch "release/*" }
      steps {

            withMaven(maven: 'maven3.6.2', jdk: 'jdk_8', mavenSettingsConfig: 'telemetry-settings-1'){

            sh 'git remote set-url origin ${GITLAB}'        
            sh 'git config --global user.email "jenkins@gitlab"'
            sh 'git config --global user.name "jenkins_gitlab"'
            sh 'git fetch --all --tags'
            sh 'git tag'
        script {
          majorMinor = env.BRANCH_NAME.split("/")[1]  
          try {
            new_tag = Integer.parseInt(sh(script: "git tag | grep ${majorMinor} | sort --version-sort | tail -1 | cut -d '.' -f 3", returnStdout: true).trim())
            echo "${new_tag}"
            new_tag += 1
          } catch (Exception e) {
              new_tag = 0
          }
          new_version = "${majorMinor}.${new_tag}"
          sh "mvn versions:set -DnewVersion=${new_version}"
          sh "mvn deploy -DskipTests"
          sh "git tag -a ${new_version} -m 'version ${new_version}'"
          sh "git push --tag"
        }
        }
      }
 
      }

    
    }
    
    post {
            always {
                // Cleaning workspace
                cleanWs()
            }
    }
}

    
 

 